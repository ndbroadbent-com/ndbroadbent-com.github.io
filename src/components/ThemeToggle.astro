---
// Theme toggle button component
---

<button class="theme-toggle" aria-label="Toggle theme">
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="theme-icon" data-theme="system">
    <rect width="20" height="14" x="2" y="3" rx="2"></rect>
    <line x1="8" x2="16" y1="21" y2="21"></line>
    <line x1="12" x2="12" y1="17" y2="21"></line>
  </svg>
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="theme-icon" data-theme="dark">
    <path d="M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401"></path>
  </svg>
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="theme-icon rainbow-icon" data-theme="light">
    <path d="M22 17a10 10 0 0 0-20 0" stroke="#FF0000"/>
    <path d="M6 17a6 6 0 0 1 12 0" stroke="#FFFF00"/>
    <path d="M10 17a2 2 0 0 1 4 0" stroke="#00FFFF"/>
  </svg>
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="theme-icon crt-icon" data-theme="crt">
    <rect x="2" y="3" width="20" height="14" rx="2" stroke="#33ff33"></rect>
    <path d="M8 21h8" stroke="#33ff33"></path>
    <path d="M12 17v4" stroke="#33ff33"></path>
    <line x1="6" y1="7" x2="6" y2="7" stroke="#33ff33" stroke-width="3"></line>
  </svg>
</button>

<script>
  const THEME_KEY = 'theme-preference';
  const THEMES = ['system', 'dark', 'light', 'crt'];

  function getStoredTheme() {
    return localStorage.getItem(THEME_KEY) || 'system';
  }

  function getAppliedTheme(theme: string) {
    if (theme === 'system') {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }
    return theme;
  }

  function applyTheme(theme: string) {
    // Handle CRT mode by redirecting to CRT page
    if (theme === 'crt') {
      window.location.href = '/crt';
      return;
    }

    const appliedTheme = getAppliedTheme(theme);

    if (appliedTheme === 'dark') {
      document.documentElement.setAttribute('data-theme', 'dark');
    } else {
      document.documentElement.removeAttribute('data-theme');
    }

    updateThemeIcon(theme);
  }

  function updateThemeIcon(theme: string) {
    const icons = document.querySelectorAll('.theme-icon');
    icons.forEach(icon => {
      icon.classList.remove('active');
      if ((icon as HTMLElement).dataset.theme === theme) {
        icon.classList.add('active');
      }
    });
  }

  function cycleTheme() {
    const currentTheme = getStoredTheme();
    const currentIndex = THEMES.indexOf(currentTheme);
    const nextIndex = (currentIndex + 1) % THEMES.length;
    const nextTheme = THEMES[nextIndex];

    localStorage.setItem(THEME_KEY, nextTheme);
    applyTheme(nextTheme);
  }

  function init() {
    const storedTheme = getStoredTheme();
    applyTheme(storedTheme);

    const toggleButton = document.querySelector('.theme-toggle');
    if (toggleButton) {
      toggleButton.addEventListener('click', cycleTheme);
    }

    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      const currentTheme = getStoredTheme();
      if (currentTheme === 'system') {
        applyTheme('system');
      }
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>

<style>
  .theme-toggle {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    background: var(--bg-color);
    border: 2px solid var(--border-color);
    border-radius: 50%;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .theme-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .theme-toggle svg {
    width: 24px;
    height: 24px;
    color: var(--text-color);
  }

  .theme-icon {
    display: none;
  }

  .theme-icon.active {
    display: block;
  }

  @media screen and (max-width: 768px) {
    .theme-toggle {
      bottom: 15px;
      right: 15px;
      width: 45px;
      height: 45px;
    }

    .theme-toggle svg {
      width: 20px;
      height: 20px;
    }
  }
</style>
