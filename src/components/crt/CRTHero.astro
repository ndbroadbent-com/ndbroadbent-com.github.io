---
// CRT-themed hero component
---

<div class="crt-hero">
  <pre class="ascii-art ascii-art-desktop">
▗▖  ▗▖ ▗▄▖▗▄▄▄▖▗▖ ▗▖ ▗▄▖ ▗▖  ▗▖    ▗▄▄▖ ▗▄▄▖  ▗▄▖  ▗▄▖ ▗▄▄▄ ▗▄▄▖ ▗▄▄▄▖▗▖  ▗▖▗▄▄▄▖
▐▛▚▖▐▌▐▌ ▐▌ █  ▐▌ ▐▌▐▌ ▐▌▐▛▚▖▐▌    ▐▌ ▐▌▐▌ ▐▌▐▌ ▐▌▐▌ ▐▌▐▌  █▐▌ ▐▌▐▌   ▐▛▚▖▐▌  █
▐▌ ▝▜▌▐▛▀▜▌ █  ▐▛▀▜▌▐▛▀▜▌▐▌ ▝▜▌    ▐▛▀▚▖▐▛▀▚▖▐▌ ▐▌▐▛▀▜▌▐▌  █▐▛▀▚▖▐▛▀▀▘▐▌ ▝▜▌  █
▐▌  ▐▌▐▌ ▐▌ █  ▐▌ ▐▌▐▌ ▐▌▐▌  ▐▌    ▐▙▄▞▘▐▌ ▐▌▝▚▄▞▘▐▌ ▐▌▐▙▄▄▀▐▙▄▞▘▐▙▄▄▖▐▌  ▐▌  █
  </pre>
  <pre class="ascii-art ascii-art-mobile">
▗▖  ▗▖ ▗▄▖▗▄▄▄▖▗▖ ▗▖ ▗▄▖ ▗▖  ▗▖
▐▛▚▖▐▌▐▌ ▐▌ █  ▐▌ ▐▌▐▌ ▐▌▐▛▚▖▐▌
▐▌ ▝▜▌▐▛▀▜▌ █  ▐▛▀▜▌▐▛▀▜▌▐▌ ▝▜▌
▐▌  ▐▌▐▌ ▐▌ █  ▐▌ ▐▌▐▌ ▐▌▐▌  ▐▌

▗▄▄▖ ▗▄▄▖  ▗▄▖  ▗▄▖ ▗▄▄▄ ▗▄▄▖ ▗▄▄▄▖▗▖  ▗▖▗▄▄▄▖
▐▌ ▐▌▐▌ ▐▌▐▌ ▐▌▐▌ ▐▌▐▌  █▐▌ ▐▌▐▌   ▐▛▚▖▐▌  █
▐▛▀▚▖▐▛▀▚▖▐▌ ▐▌▐▛▀▜▌▐▌  █▐▛▀▚▖▐▛▀▀▘▐▌ ▝▜▌  █
▐▙▄▞▘▐▌ ▐▌▝▚▄▞▘▐▌ ▐▌▐▙▄▄▀▐▙▄▞▘▐▙▄▄▖▐▌  ▐▌  █
  </pre>

  <div class="terminal-output">
    <p class="info-line">
      <span class="label">> NAME:</span>
      <span class="value">Nathan Broadbent</span>
    </p>

    <p class="info-line">
      <span class="label">> ROLE:</span>
      <span class="value">Software Developer</span>
    </p>

    <p class="info-line">
      <span class="label">> LOCATION:</span>
      <span class="value">Paihia, New Zealand</span>
    </p>

    <div class="bio">
      <p>> PROFILE DESCRIPTION:</p>
      <p>  Full-stack developer with expertise in building</p>
      <p>  scalable web applications and developer tools. Founder of <a href="https://docspring.com" target="_blank">DocSpring</a>.</p>
    </div>

    <p class="spacer">></p>
    <div class="blog">
      <p>> BLOG: <a href="https://madebynathan.com" target="_blank">https://madebynathan.com</a></p>
    </div>

    <p class="spacer">></p>

    <div class="skills">
      <p>> TECHNICAL SKILLS:</p>
      <p>  - Ruby / Rails</p>
      <p>  - JavaScript / TypeScript</p>
      <p>  - React / Node.js</p>
      <p>  - Go</p>
      <p>  - Rust</p>
      <p>  - Docker / Kubernetes</p>
      <p>  - PostgreSQL / Redis</p>
      <p>  - CI/CD & DevOps</p>
    </div>

    <p class="spacer">></p>

    <div class="contact">
      <p>> CONTACT INFORMATION:</p>
      <p>  EMAIL: <a href="mailto:hello@ndbroadbent.com">hello@ndbroadbent.com</a></p>
      <p>  GITHUB: <a href="https://github.com/ndbroadbent" target="_blank">github.com/ndbroadbent</a></p>
      <p>  LINKEDIN: <a href="https://linkedin.com/in/ndbroadbent" target="_blank">linkedin.com/in/ndbroadbent</a></p>
    </div>

    <p class="spacer">></p>

    <div class="projects">
      <p>> FEATURED PROJECTS:</p>
      <p class="spacer"></p>
      <p>  [1] DocSpring - PDF Generation API</p>
      <p>      SaaS platform for creating and managing PDF templates</p>
      <p>      > <a href="https://docspring.com" target="_blank">docspring.com</a></p>
      <p class="spacer"></p>
      <p>  [2] SCM Breeze - Git workflow enhancement</p>
      <p>      Shell scripts for streamlined Git operations</p>
      <p>      > <a href="https://github.com/scmbreeze/scm_breeze" target="_blank">github.com/scmbreeze/scm_breeze</a></p>
      <p class="spacer"></p>
      <p>  [3] Open Source Contributions</p>
      <p>      Active contributor to various open source projects</p>
      <p>      > <a href="https://github.com/ndbroadbent" target="_blank">View on GitHub</a></p>
    </div>

    <p class="spacer">></p>
  </div>

  <div class="command-line">
    <span class="prompt">&gt;&nbsp;</span>
    <span class="input-wrapper">
      <input type="text" class="command-input" id="command-input" autocomplete="off" spellcheck="false" />
      <span class="cursor" id="cursor">█</span>
    </span>
  </div>
</div>

<script>
  // Command history and state
  let commandHistory: string[] = [];
  let historyIndex = -1;
  let currentDir = '/home/nathan';

  // File system simulation
  const fileSystem: Record<string, string[]> = {
    '/': ['home', 'bin', 'etc', 'usr'],
    '/home': ['nathan'],
    '/home/nathan': ['projects', 'documents', 'resume.txt'],
    '/home/nathan/projects': ['docspring', 'scm_breeze', 'dotfiles'],
    '/home/nathan/documents': ['notes.txt', 'ideas.md'],
    'C:\\': ['Users', 'Windows', 'Program Files'],
    'C:\\Users': ['Nathan'],
    'C:\\Users\\Nathan': ['Projects', 'Documents', 'Desktop'],
    'C:\\Users\\Nathan\\Projects': ['DocSpring', 'SCMBreeze'],
  };

  // Project URLs mapping
  const projectUrls: Record<string, string> = {
    'docspring': 'https://docspring.com',
    'scm_breeze': 'https://github.com/scmbreeze/scm_breeze',
    'dotfiles': 'https://github.com/ndbroadbent/dotfiles',
  };

  // Command execution
  function executeCommand(cmd: string): string {
    const parts = cmd.trim().split(/\s+/);
    const command = parts[0].toLowerCase();
    const args = parts.slice(1);

    switch (command) {
      case 'ls':
      case 'll':
      case 'dir':
        return listDirectory(args[0]);

      case 'pwd':
      case 'cd.':
        return currentDir;

      case '..':
        return changeDirectory('..');

      case 'cd':
        return changeDirectory(args[0]);

      case 'help':
      case '?':
        return `Available commands:
  ls, ll, dir - List directory contents
  pwd, cd.    - Print working directory
  cd [path]   - Change directory
  cat [file]  - Display file contents
  clear, cls  - Clear screen
  help, ?     - Show this help
  about       - About me
  contact     - Contact information
  github      - Open GitHub profile`;

      case 'clear':
      case 'cls':
        clearTerminal();
        return '';

      case 'cat':
      case 'type':
        return readFile(args[0]);

      case 'about':
        return `Nathan Broadbent - Full-stack developer
Location: Paihia, New Zealand
Founder of DocSpring (https://docspring.com)
Blog: https://madebynathan.com`;

      case 'contact':
        return `Email: hello@ndbroadbent.com
GitHub: github.com/ndbroadbent
LinkedIn: linkedin.com/in/ndbroadbent`;

      case 'github':
      case 'gh':
        window.open('https://github.com/ndbroadbent', '_blank');
        return 'Opening GitHub profile...';

      case 'blog':
        window.open('https://madebynathan.com', '_blank');
        return 'Opening blog...';

      case 'ps':
        return `PID  TTY          TIME CMD
  1  pts/0    00:00:00 init
  42 pts/0    00:00:00 portfolio.sh
1337 pts/0    00:00:00 terminal`;

      case '':
        return '';

      default:
        return `Command not found: ${command}. Type 'help' for available commands.`;
    }
  }

  function listDirectory(path?: string): string {
    let targetDir = currentDir;

    if (path) {
      // Strip trailing slashes
      const cleanPath = path.replace(/\/+$/, '');

      // Check if the final segment is a project name
      const pathParts = cleanPath.split('/');
      const lastSegment = pathParts[pathParts.length - 1];

      if (projectUrls[lastSegment]) {
        return projectUrls[lastSegment];
      }

      // Handle absolute vs relative paths
      if (cleanPath.startsWith('/')) {
        targetDir = cleanPath;
      } else {
        targetDir = currentDir === '/' ? `/${cleanPath}` : `${currentDir}/${cleanPath}`;
      }
    }

    const contents = fileSystem[targetDir] || [];
    if (contents.length === 0) {
      return 'Directory is empty';
    }
    return contents.join('  ');
  }

  function changeDirectory(path: string): string {
    if (!path || path === '~') {
      currentDir = '/home/nathan';
      return '';
    }

    // Strip trailing slashes (but preserve single /)
    const originalPath = path;
    path = path.replace(/\/+$/, '');

    // Handle root directory
    if (originalPath === '/' || path === '') {
      currentDir = '/';
      return '';
    }

    if (path === '~') {
      currentDir = '/home/nathan';
      return '';
    }

    if (path === '..') {
      const parts = currentDir.split('/').filter(p => p);
      parts.pop();
      currentDir = parts.length > 0 ? '/' + parts.join('/') : '/';
      return '';
    }

    // Restricted directories
    const restrictedDirs = ['bin', 'etc', 'usr', '/bin', '/etc', '/usr'];
    const newPath = currentDir === '/' ? `/${path}` : `${currentDir}/${path}`;

    if (restrictedDirs.includes(path) || restrictedDirs.includes(newPath)) {
      return `Permission denied`;
    }

    // Try absolute path
    if (fileSystem[path]) {
      currentDir = path;
      return '';
    }

    // Try relative path
    if (fileSystem[newPath]) {
      currentDir = newPath;
      return '';
    }

    // Check if it's a file (exists in parent directory listing but not as a directory in fileSystem)
    // Extract parent path and filename
    let checkPath = path;
    let parentPath = currentDir;

    if (path.includes('/')) {
      const parts = path.split('/');
      const filename = parts[parts.length - 1];
      const parent = parts.slice(0, -1).join('/');

      if (path.startsWith('/')) {
        parentPath = '/' + parent;
      } else {
        parentPath = currentDir === '/' ? `/${parent}` : `${currentDir}/${parent}`;
      }
      checkPath = filename;
    }

    const items = fileSystem[parentPath] || [];
    if (items.includes(checkPath)) {
      return `Not a directory: ${path}`;
    }

    // Check if it's a project path (joke - just open the URL)
    // Only if we're in /home/nathan/projects or path starts with projects/
    const pathParts = path.split('/');
    const lastSegment = pathParts[pathParts.length - 1];

    if (projectUrls[lastSegment]) {
      // Check if we're in projects directory or path includes projects
      const inProjectsDir = currentDir === '/home/nathan/projects';
      const pathIncludesProjects = pathParts.includes('projects') || path.startsWith('projects/');

      if (inProjectsDir || pathIncludesProjects) {
        window.open(projectUrls[lastSegment], '_blank');
        return `Opening ${lastSegment}...`;
      }
    }

    return `Directory not found: ${path}`;
  }

  function readFile(filename: string): string {
    if (!filename) {
      return 'Usage: cat [filename]';
    }

    const files: Record<string, string> = {
      'resume.txt': `NATHAN BROADBENT - SOFTWARE DEVELOPER
==========================================
Full-stack developer with expertise in Ruby/Rails,
JavaScript/TypeScript, React, Go, and Rust.
Founder of DocSpring - PDF Generation API.
Email: hello@ndbroadbent.com`,
      'notes.txt': 'toggle the theme to see some more stuff',
      'ideas.md': `# Project Ideas
- Build a retro terminal website ✓
- Add more features to DocSpring`,
      'documents/notes.txt': 'toggle the theme to see some more stuff',
      'documents/ideas.md': `# Project Ideas
- Build a retro terminal website ✓
- Add more features to DocSpring`,
    };

    // Try exact match first
    if (files[filename]) {
      return files[filename];
    }

    // Try just the filename (basename)
    const basename = filename.split('/').pop() || '';
    const content = files[basename];
    if (content) {
      return content;
    }

    return `File not found: ${filename}`;
  }

  function clearTerminal() {
    const terminalOutput = document.querySelector('.terminal-output');
    if (terminalOutput) {
      terminalOutput.innerHTML = '<p>> Terminal ready. Type "help" for commands.</p>';
    }
  }

  function appendOutput(command: string, output: string) {
    const terminalOutput = document.querySelector('.terminal-output');
    if (!terminalOutput) return;

    const commandLine = document.createElement('p');
    commandLine.textContent = `> ${command}`;
    commandLine.style.color = '#99ff99';
    commandLine.style.margin = '0.5rem 0';
    terminalOutput.appendChild(commandLine);

    if (output) {
      const outputElem = document.createElement('p');
      outputElem.textContent = output;
      outputElem.style.whiteSpace = 'pre-wrap';
      outputElem.style.marginLeft = '1rem';
      outputElem.style.margin = '0.3rem 0 0.3rem 1rem';
      terminalOutput.appendChild(outputElem);
    }

    // Scroll to bottom
    const screen = document.getElementById('crt-screen');
    if (screen) {
      screen.scrollTop = screen.scrollHeight;
    }
  }

  // Initialize terminal
  function initTerminal() {
    const input = document.getElementById('command-input') as HTMLInputElement;
    if (!input) return;

    // Update cursor position based on text content
    function updateCursorPosition() {
      const cursor = document.getElementById('cursor');
      if (!cursor) return;

      const text = input.value;
      let textWidth = 0;

      if (text.length > 0) {
        // Create temporary span to measure text width
        const measureSpan = document.createElement('span');
        measureSpan.style.font = getComputedStyle(input).font;
        measureSpan.style.letterSpacing = getComputedStyle(input).letterSpacing;
        measureSpan.style.visibility = 'hidden';
        measureSpan.style.position = 'absolute';
        measureSpan.textContent = text;
        document.body.appendChild(measureSpan);

        textWidth = measureSpan.offsetWidth;
        document.body.removeChild(measureSpan);
      }

      // Position cursor at end of text (accounting for wrapper padding)
      cursor.style.left = `calc(0.5ch + ${textWidth}px)`;
      cursor.style.display = 'inline';
    }

    // Focus input when clicking anywhere on screen
    const screen = document.getElementById('crt-screen');
    if (screen) {
      screen.addEventListener('click', () => {
        input.focus();
      });
    }

    // Handle keyboard input globally
    document.addEventListener('keydown', (e) => {
      // Don't interfere with meta keys
      if (e.metaKey || e.ctrlKey || e.altKey) return;

      // Handle Enter key to scroll to bottom and focus
      if (e.key === 'Enter') {
        input.focus();
        if (screen) {
          screen.scrollTop = screen.scrollHeight;
        }
      }
      // Focus input and scroll to bottom when typing
      else if (e.key.length === 1) {
        input.focus();
        if (screen) {
          screen.scrollTop = screen.scrollHeight;
        }
      }
    });

    // Tab autocompletion
    function handleTabCompletion() {
      const value = input.value;
      const parts = value.split(/\s+/);

      // Command completion (first word)
      if (parts.length === 1) {
        const commands = ['ls', 'll', 'dir', 'pwd', 'cd', 'help', 'clear', 'cls', 'cat', 'type', 'about', 'contact', 'github', 'blog', 'ps'];
        const matches = commands.filter(cmd => cmd.startsWith(parts[0].toLowerCase()));

        if (matches.length === 1) {
          input.value = matches[0] + ' ';
          updateCursorPosition();
        } else if (matches.length > 1) {
          // Find common prefix
          const commonPrefix = findCommonPrefix(matches);
          if (commonPrefix.length > parts[0].length) {
            input.value = commonPrefix;
            updateCursorPosition();
          } else {
            // Show available matches
            const output = matches.join('  ');
            appendOutput(value, output);
          }
        }
      }
      // Path completion (for cd, ls, ll, cat, type commands)
      else if (parts.length >= 2) {
        const cmd = parts[0].toLowerCase();
        const partialPath = parts.slice(1).join(' ');

        if (cmd === 'cd' || cmd === 'ls' || cmd === 'll' || cmd === 'dir') {
          let targetDir = currentDir;
          let searchPattern = partialPath;
          let pathPrefix = '';

          // Handle paths with / (e.g., projects/docs)
          if (partialPath.includes('/')) {
            const pathParts = partialPath.split('/');
            const parentPath = pathParts.slice(0, -1).join('/');
            searchPattern = pathParts[pathParts.length - 1];
            pathPrefix = parentPath + '/';

            // Build target directory
            if (partialPath.startsWith('/')) {
              targetDir = '/' + pathParts.slice(1, -1).join('/');
              if (targetDir === '/') targetDir = '/';
              pathPrefix = parentPath === '' ? '/' : parentPath + '/';
            } else {
              targetDir = currentDir === '/' ? `/${parentPath}` : `${currentDir}/${parentPath}`;
            }
          }

          const items = fileSystem[targetDir] || [];
          const matches = items.filter(d => d.toLowerCase().startsWith(searchPattern.toLowerCase()));

          if (matches.length === 1) {
            // Check if it's a directory
            const testPath = targetDir === '/' ? `/${matches[0]}` : `${targetDir}/${matches[0]}`;
            const isDirectory = fileSystem[testPath] !== undefined;

            // Add trailing slash for completed directory
            input.value = `${cmd} ${pathPrefix}${matches[0]}${isDirectory ? '/' : ''}`;
            updateCursorPosition();
          } else if (matches.length > 1) {
            const commonPrefix = findCommonPrefix(matches);
            if (commonPrefix.length > searchPattern.length) {
              input.value = `${cmd} ${pathPrefix}${commonPrefix}`;
              updateCursorPosition();
            } else {
              // Show available matches with / only for directories
              const output = matches.map(m => {
                const testPath = targetDir === '/' ? `/${m}` : `${targetDir}/${m}`;
                const isDirectory = fileSystem[testPath] !== undefined;
                return isDirectory ? m + '/' : m;
              }).join('  ');
              appendOutput(value, output);
            }
          }
        } else if (cmd === 'cat' || cmd === 'type') {
          let targetDir = currentDir;
          let searchPattern = partialPath;
          let pathPrefix = '';

          // Handle paths with / (e.g., documents/notes.txt)
          if (partialPath.includes('/')) {
            const pathParts = partialPath.split('/');
            const parentPath = pathParts.slice(0, -1).join('/');
            searchPattern = pathParts[pathParts.length - 1];
            pathPrefix = parentPath + '/';

            // Build target directory
            if (partialPath.startsWith('/')) {
              targetDir = '/' + pathParts.slice(1, -1).join('/');
              if (targetDir === '/') targetDir = '/';
              pathPrefix = parentPath === '' ? '/' : parentPath + '/';
            } else {
              targetDir = currentDir === '/' ? `/${parentPath}` : `${currentDir}/${parentPath}`;
            }
          }

          // Get all items (directories and files) from target directory
          const allItems = fileSystem[targetDir] || [];
          const matches = allItems.filter(f => f.toLowerCase().startsWith(searchPattern.toLowerCase()));

          if (matches.length === 1) {
            // Check if it's a directory or file
            const fullPath = pathPrefix ? `${pathPrefix}${matches[0]}` : matches[0];
            const testPath = targetDir === '/' ? `/${matches[0]}` : `${targetDir}/${matches[0]}`;
            const isDirectory = fileSystem[testPath] !== undefined;

            input.value = `${cmd} ${fullPath}${isDirectory ? '/' : ''}`;
            updateCursorPosition();
          } else if (matches.length > 1) {
            const commonPrefix = findCommonPrefix(matches);
            if (commonPrefix.length > searchPattern.length) {
              input.value = `${cmd} ${pathPrefix}${commonPrefix}`;
              updateCursorPosition();
            } else {
              // Show available matches
              const output = matches.join('  ');
              appendOutput(value, output);
            }
          }
        }
      }
    }

    function findCommonPrefix(strings: string[]): string {
      if (strings.length === 0) return '';
      if (strings.length === 1) return strings[0];

      let prefix = strings[0];
      for (let i = 1; i < strings.length; i++) {
        while (strings[i].indexOf(prefix) !== 0) {
          prefix = prefix.substring(0, prefix.length - 1);
          if (prefix === '') return '';
        }
      }
      return prefix;
    }

    // Handle command input
    input.addEventListener('keydown', (e) => {
      if (e.key === 'Tab') {
        e.preventDefault();
        handleTabCompletion();
      } else if (e.key === 'Enter') {
        e.preventDefault();
        const command = input.value.trim();

        if (command) {
          commandHistory.push(command);
          historyIndex = commandHistory.length;

          const output = executeCommand(command);
          appendOutput(command, output);
        } else {
          // Empty command - just show prompt
          appendOutput('', '');
        }

        input.value = '';
        updateCursorPosition();
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        if (historyIndex > 0) {
          historyIndex--;
          input.value = commandHistory[historyIndex];
          updateCursorPosition();
        }
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        if (historyIndex < commandHistory.length - 1) {
          historyIndex++;
          input.value = commandHistory[historyIndex];
        } else {
          historyIndex = commandHistory.length;
          input.value = '';
        }
        updateCursorPosition();
      }
    });

    input.addEventListener('input', updateCursorPosition);

    // Initialize cursor position
    updateCursorPosition();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTerminal);
  } else {
    initTerminal();
  }
</script>

<style>
  .crt-hero {
    width: 100%;
    font-size: 2rem;
  }

  .ascii-art {
    font-size: 1.5rem;
    line-height: 1.2;
    color: #33ff33;
    text-shadow:
      0 0 5px rgba(51, 255, 51, 0.5),
      0 0 10px rgba(51, 255, 51, 0.3),
      0 0 15px rgba(51, 255, 51, 0.2);
    margin-bottom: 2rem;
    white-space: pre;
    overflow-x: auto;
  }

  .ascii-art-mobile {
    display: none;
  }

  .terminal-output {
    /* Inherits VT323 from parent */
  }

  .prompt {
    color: #66ff66;
    text-shadow:
      0 0 5px rgba(102, 255, 102, 0.5),
      0 0 10px rgba(102, 255, 102, 0.3);
    margin: 0.5rem 0;
  }

  .spacer {
    margin: 0.5rem 0;
    color: #33ff33;
  }

  .info-line {
    margin: 0.5rem 0;
    display: flex;
    gap: 1rem;
  }

  .label {
    color: #99ff99;
    min-width: 120px;
    text-shadow:
      0 0 5px rgba(153, 255, 153, 0.5),
      0 0 10px rgba(153, 255, 153, 0.3);
  }

  .value {
    color: #33ff33;
  }

  .bio,
  .skills,
  .contact,
  .projects {
    margin: 1rem 0;
  }

  .bio p,
  .skills p,
  .contact p,
  .projects p {
    margin: 0.3rem 0;
  }

  a {
    color: #66ff66;
    text-decoration: underline;
    text-shadow:
      0 0 5px rgba(102, 255, 102, 0.5),
      0 0 10px rgba(102, 255, 102, 0.3);
    transition: all 0.2s ease;
  }

  a:hover {
    color: #99ff99;
    text-shadow:
      0 0 8px rgba(153, 255, 153, 0.6),
      0 0 15px rgba(153, 255, 153, 0.4),
      0 0 25px rgba(153, 255, 153, 0.2);
  }

  @keyframes blink-cursor {
    0%, 49% { opacity: 1; }
    50%, 100% { opacity: 0; }
  }

  .cursor {
    animation: blink-cursor 1s infinite;
  }

  .command-line {
    display: flex;
    align-items: center;
    margin-top: 0.5rem;
  }

  .command-line .prompt {
    color: #99ff99;
    text-shadow:
      0 0 5px rgba(153, 255, 153, 0.5),
      0 0 10px rgba(153, 255, 153, 0.3);
  }

  .input-wrapper {
    position: relative;
    flex: 1;
    display: inline-block;
    padding-left: 0;
  }

  .command-input {
    background: transparent;
    border: none;
    outline: none;
    color: #33ff33;
    font-family: 'VT323', monospace;
    font-size: inherit;
    text-shadow:
      0 0 5px rgba(51, 255, 51, 0.5),
      0 0 10px rgba(51, 255, 51, 0.3),
      0 0 15px rgba(51, 255, 51, 0.2);
    letter-spacing: 0.05em;
    caret-color: transparent;
    padding: 0;
    margin: 0;
    width: 100%;
    min-width: 20px;
  }

  .input-wrapper .cursor {
    position: absolute;
    left: 0;
    top: 0;
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .ascii-art-desktop {
      display: none;
    }

    .ascii-art-mobile {
      display: block;
      font-size: 0.5rem;
      margin-bottom: 1rem;
      line-height: 1.1;
    }

    .info-line {
      flex-direction: column;
      gap: 0.25rem;
    }

    .label {
      min-width: auto;
    }
  }
</style>
